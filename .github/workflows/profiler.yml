name: MongoDB Query Profiler

on:
  pull_request:
    branches: [main]

jobs:
  profile-queries:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: live
        options: >-
          --health-cmd "mongosh --eval 'db.admin().ping()'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 40s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up environment
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          DB_NAME: ${{ secrets.DB_NAME }}
          MAX_EXECUTION_TIME_MS: ${{ secrets.MAX_EXECUTION_TIME_MS }}
          WARN_EXECUTION_TIME_MS: ${{ secrets.WARN_EXECUTION_TIME_MS }}
          MAX_DOCS_EXAMINED: ${{ secrets.MAX_DOCS_EXAMINED }}
          MIN_QUERY_EFFICIENCY: ${{ secrets.MIN_QUERY_EFFICIENCY }}
        run: |
          if [ -n "$MONGO_URI" ]; then
            echo "MONGO_URI=$MONGO_URI" >> $GITHUB_ENV
          else
            echo "MONGO_URI=mongodb://admin:password@localhost:27017" >> $GITHUB_ENV
          fi
          if [ -n "$DB_NAME" ]; then
            echo "DB_NAME=$DB_NAME" >> $GITHUB_ENV
          else
            echo "DB_NAME=live" >> $GITHUB_ENV
          fi
          
          # Performance thresholds (with defaults if not set in secrets)
          if [ -n "$MAX_EXECUTION_TIME_MS" ]; then
            echo "MAX_EXECUTION_TIME_MS=$MAX_EXECUTION_TIME_MS" >> $GITHUB_ENV
          else
            echo "MAX_EXECUTION_TIME_MS=100" >> $GITHUB_ENV
          fi
          
          if [ -n "$WARN_EXECUTION_TIME_MS" ]; then
            echo "WARN_EXECUTION_TIME_MS=$WARN_EXECUTION_TIME_MS" >> $GITHUB_ENV
          else
            echo "WARN_EXECUTION_TIME_MS=50" >> $GITHUB_ENV
          fi
          
          if [ -n "$MAX_DOCS_EXAMINED" ]; then
            echo "MAX_DOCS_EXAMINED=$MAX_DOCS_EXAMINED" >> $GITHUB_ENV
          else
            echo "MAX_DOCS_EXAMINED=500" >> $GITHUB_ENV
          fi
          
          if [ -n "$MIN_QUERY_EFFICIENCY" ]; then
            echo "MIN_QUERY_EFFICIENCY=$MIN_QUERY_EFFICIENCY" >> $GITHUB_ENV
          else
            echo "MIN_QUERY_EFFICIENCY=0.1" >> $GITHUB_ENV
          fi

      - name: Debug MongoDB service
        run: |
          echo "Checking MongoDB service status..."
          docker ps -a | grep mongo || echo "No MongoDB containers found"
          
          echo "Checking if port 27017 is open..."
          netstat -tuln | grep 27017 || echo "Port 27017 not found"
          
          echo "Attempting to connect to localhost:27017..."
          timeout 5 bash -c '</dev/tcp/localhost/27017' && echo "Port accessible" || echo "Port not accessible"

      - name: Wait for MongoDB with simple approach
        run: |
          echo "Waiting for MongoDB to be ready..."
          
          # Wait for port to be open
          for i in {1..30}; do
            if nc -z localhost 27017; then
              echo "‚úÖ MongoDB port 27017 is responding (attempt $i)"
              break
            else
              echo "Waiting for MongoDB... (attempt $i/30)"
              sleep 2
            fi
          done
          
          # Give MongoDB a few more seconds to fully initialize
          echo "Giving MongoDB time to fully initialize..."
          sleep 10

      - name: Test MongoDB connection with Node.js
        run: |
          echo "Testing MongoDB connection with Node.js..."
          node -e "
          const { MongoClient } = require('mongodb');
          (async () => {
            try {
              const client = new MongoClient('${{ env.MONGO_URI }}', {
                serverSelectionTimeoutMS: 5000,
                connectTimeoutMS: 5000,
                authSource: 'admin'
              });
              
              console.log('Attempting to connect to MongoDB...');
              await client.connect();
              console.log('‚úÖ MongoDB connection successful!');
              
              const db = client.db('${{ env.DB_NAME }}');
              const result = await db.admin().ping();
              console.log('‚úÖ Database ping successful:', result);
              
              // Test basic operations
              const testCollection = db.collection('test_connection');
              await testCollection.insertOne({ data: 'connection', timestamp: new Date() });
              const count = await testCollection.countDocuments({});
              console.log('‚úÖ Test document operations successful. Count:', count);
              
              await client.close();
              console.log('‚úÖ MongoDB connection data completed successfully!');
            } catch (error) {
              console.error('‚ùå MongoDB connection failed:', error.message);
              console.error('Full error:', error);
              process.exit(1);
            }
          })();
          "

      - name: Load test data from datas folder
        run: |
          echo "üìÅ Loading data from datas folder..."
          echo "Using MONGO_URI: ${{ env.MONGO_URI }}"
          echo "Using DB_NAME: ${{ env.DB_NAME }}"
          npm run load-data
        env:
          MONGO_URI: ${{ env.MONGO_URI }}
          DB_NAME: ${{ env.DB_NAME }}
          FORCE_RELOAD: "true"

      - name: Verify data loading
        run: |
          echo "üîç Verifying data was loaded correctly..."
          node -e "
          const { MongoClient } = require('mongodb');
          (async () => {
            try {
              const client = new MongoClient('${{ env.MONGO_URI }}', {
                authSource: 'admin'
              });
              await client.connect();
              
              const db = client.db('${{ env.DB_NAME }}');
              const collections = await db.listCollections().toArray();
              
              console.log('Available collections:');
              for (const collection of collections) {
                const count = await db.collection(collection.name).countDocuments();
                console.log(\`  - \${collection.name}: \${count} documents\`);
              }
              
              await client.close();
              console.log('‚úÖ Data verification completed');
            } catch (error) {
              console.error('‚ùå Data verification failed:', error.message);
              process.exit(1);
            }
          })();
          "

      - name: Extract MongoDB queries
        id: extract
        run: |
          echo "üîç Extracting MongoDB queries from codebase..."
          npm run extract
        continue-on-error: false

      - name: Debug extracted queries
        if: always()
        run: |
          echo "Checking extracted queries..."
          if [ -f "reports/queries.json" ]; then
            echo "‚úÖ Queries extracted:"
            cat reports/queries.json | jq '.' || cat reports/queries.json
          else
            echo "‚ùå No queries.json file found"
            ls -la reports/ || echo "Reports directory not found"
          fi

      - name: Run profiler on extracted queries
        id: analyze
        if: steps.extract.outcome == 'success'
        run: |
          echo "‚ö° Running MongoDB profiler..."
          npm run analyze
        continue-on-error: true

      - name: Generate analysis reports
        id: report
        if: steps.extract.outcome == 'success'
        run: |
          echo "üìä Generating performance reports..."
          npm run report
        continue-on-error: true

      - name: Debug profiler outputs
        if: always()
        run: |
          echo "Checking profiler output files..."
          ls -la reports/ || echo "Reports directory not found"
          
          echo -e "\n=== Profiler Output Log ==="
          if [ -f "reports/profiler-output.log" ]; then
            head -20 reports/profiler-output.log
          else
            echo "No profiler-output.log found"
          fi
          
          echo -e "\n=== Analysis Summary ==="
          if [ -f "reports/profiler-summary.log" ]; then
            head -20 reports/profiler-summary.log
          else
            echo "No profiler-summary.log found"
          fi

      - name: Check profiler results
        id: check_results
        run: |
          if [ -f "reports/pr-query-report.md" ]; then
            echo "report_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Profiler report generated successfully"
          else
            echo "report_exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No profiler report generated"
          fi
          
          if [ -f "reports/queries.json" ]; then
            QUERY_COUNT=$(jq length reports/queries.json 2>/dev/null || echo "0")
            echo "query_count=$QUERY_COUNT" >> $GITHUB_OUTPUT
            echo "üìä Found $QUERY_COUNT queries to analyze"
          else
            echo "query_count=0" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No queries found in codebase"
          fi

      - name: Upload profiler artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mongodb-profiler-results
          path: |
            reports/queries.json
            reports/profiler-output.log
            reports/profiler-summary.log
            reports/pr-query-report.md
          retention-days: 30

      - name: Comment PR with detailed results
        if: github.event_name == 'pull_request' && steps.check_results.outputs.report_exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const report = fs.readFileSync('reports/pr-query-report.md', 'utf8');
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: report
              });
              
              console.log('‚úÖ Performance report posted to PR');
            } catch (error) {
              console.error('‚ùå Failed to post report:', error.message);
            }

      - name: Comment PR with summary when no queries found
        if: github.event_name == 'pull_request' && steps.check_results.outputs.query_count == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## üîç MongoDB Query Profiler Results
            
            **No MongoDB queries detected** in this PR.
            
            The profiler scans for:
            - MongoDB Driver patterns: \`db.collection('name').find({})\`
            - Chained operations: \`db.collection('name').find({}).project().sort()\`
            - Mongoose models: \`User.findById()\`, \`Product.aggregate([])\`
            
            If you expected queries to be found, please check the [supported patterns](${context.payload.repository.html_url}/blob/main/README.md).`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Set job status based on results
        if: always()
        run: |
          if [ "${{ steps.extract.outcome }}" = "failure" ]; then
            echo "‚ùå Query extraction failed"
            exit 1
          elif [ "${{ steps.check_results.outputs.query_count }}" = "0" ]; then
            echo "‚ö†Ô∏è No queries found, but pipeline succeeded"
            exit 0
          elif [ "${{ steps.analyze.outcome }}" = "failure" ]; then
            echo "‚ö†Ô∏è Profiler analysis failed, but queries were extracted"
            exit 0
          else
            echo "‚úÖ Profiler pipeline completed successfully"
            echo "üìä Analyzed ${{ steps.check_results.outputs.query_count }} queries"
            exit 0
          fi
